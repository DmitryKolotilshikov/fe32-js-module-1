/* Task 1 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤:
const colors = ['red', 'green', 'blue']
–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –¥–ª–∏–Ω—É. */

const colors = ['red', 'green', 'blue'];
console.log(colors.length);


/* Task 2 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤:
const animals = ['monkey', 'dog', 'cat']
–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –¥–ª–∏–Ω–Ω—ã. */

const animals = ['monkey', 'dog', 'cat'];
const lastElement = animals.pop();
console.log(lastElement);


/* Task 3 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤:
const numbers = [5, 43, 63, 23, 90]
–£–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. */

const numbers = [5, 43, 63, 23, 90];
numbers.splice(0, 5);
console.log(numbers);

// –°–ø–æ—Å–æ–± 2:

const deletedNumbers = numbers.slice(0,5);
console.log(deletedNumbers);


/* 
Task 4 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤:
const students = ['Polina', 'Dasha', 'Masha']
–£–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ Borya.
–£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ Andrey.
–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å. */

const students = ['Polina', 'Dasha', 'Masha'];

students.splice(-1, 1, "Borya");
students.splice(0, 1, "Andrey");
console.log(students);


/* Task 5 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤:
const cats = ['Gachito', 'Tom', 'Batman']
–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for, –∑–∞—Ç–µ–º for of. */

const cats = ['Gachito', 'Tom', 'Batman'];

for (let i=0; i < cats.length; i++) {
    console.log(cats[i]);
}

for (const value of cats) {
    console.log(value);
}


/* Task 6 üñ•
const evenNumbers = [2, 4, 6, 8, 10]
const oddNumbers = [1, 3, 5, 7, 9]
–°–æ–µ–¥–∏–Ω–∏—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –≤ –æ–¥–∏–Ω.
–í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ 8 */

const evenNumbers = [2, 4, 6, 8, 10];
const oddNumbers = [1, 3, 5, 7, 9];

const joinedArray = evenNumbers.concat(oddNumbers);
console.log(joinedArray.indexOf(8));


/* Task 7 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤:
const binary = [0, 0, 0, 0]
–ù–∞—à –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–ª–Ω—ã–π, –≤ –Ω–µ–º —è–≤–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü.
–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É.
[0, 0, 0, 0] -> '0101010' */

const binary = [0, 0, 0, 0];
const stringBinary = binary.join("1");
console.log(stringBinary);


// ADVANCED level

/* Task 1 üë®‚Äçüè´
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º. */

function palindrome(str) {
    let check = '';
    for (let i = str.length - 1; i >= 0; --i) {
      check += str[i];
    }
    return str == check;
  }

  console.log(palindrome("–æ–Ω–æ"));
  console.log(palindrome("–¥–æ–º"));


/*   Task 3 üë®‚Äçüè´
–î–∞–Ω –º–∞—Å—Å–∏–≤:
const mixedNumbers = [-14, 24, -89, 43, 0 , -1, 412, 4]
–°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞, –≤ –æ–¥–∏–Ω –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤–∫–ª—é—á–∞—è 0, –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ.
–û–±–∞ –º–∞—Å—Å–∏–≤–∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å. */

const mixedNumbers = [-14, 24, -89, 43, 0 , -1, 412, 4];

const filteredArray = (mixedNumbers) => {
    return mixedNumbers.filter((el) => {
        if (el >= 0) {
            return el;
        }
    });
}
const positiveNumbers = filteredArray(mixedNumbers);

console.log(positiveNumbers);

const filteredArray2 = (mixedNumbers) => {
    return mixedNumbers.filter((el) => {
        if (el < 0) {
            return el;
        }
    });
}
const negativeNumbers = filteredArray2(mixedNumbers);
console.log(negativeNumbers);


/* Task 4 üë®‚Äçüè´
–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 5, –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª. 
–î–∞–ª–µ–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, 
–≤–æ–∑–≤–æ–¥–∏—Ç –∏—Ö –≤ –∫—É–± –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤. –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ—Å—Ç–∏ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å. */

const array = [];
while(array.length < 5){
    let r = Math.floor(Math.random() * 100) + 1;
    if(array.indexOf(r) === -1) array.push(r);
}
console.log(array);
const newArray = array.map((el) => Math.pow(el, 3));
console.log(newArray);